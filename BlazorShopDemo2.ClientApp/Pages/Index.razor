@page "/"

@inject IProductService ProductService
@inject IProductService ProductService

<AuthorizeView>
    <Authorized>
        <p>Welcome, @context.User.Identity.Name</p>
    </Authorized>
    <NotAuthorized>
        <p>Not signed in</p>
    </NotAuthorized>
</AuthorizeView>

<MudGrid>
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary"/>
    }
    else
    {
        @foreach(var category in _products.Select(x => x.Category.Name).OrderBy(x => x).Distinct())
        {
            <MudGrid Class="mb-4">
                <MudItem xs="12" lg="12" md="12">
                    <MudText Typo="Typo.h3">@category.Humanize().Pluralize()</MudText>
                </MudItem>
                @foreach (var product in _products.Where(x => x.Category.Name == category))
                {
                    <MudItem xs="12" lg="2" md="4">
                        <MudCard Elevation="5" Class="text-center">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6">@product.Name</MudText>
                                <MudSpacer/>
                                <MudText Typo="Typo.h5" Color="Color.Success">@product.ProductPrices.FirstOrDefault()?.Price.ToString("C0")</MudText>
                            </MudCardHeader>
                            <MudCardMedia Image="@product.ImageUrl" Height="250" />
                            <MudCardContent>
                                <MudText Typo="Typo.body2">@product.Description</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton FullWidth Variant="Variant.Filled" Color="Color.Primary" Href="@($"/details/{@product.Id}")" Class="btn-responsive">View Details</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

        }
    }
</MudGrid>

@code {
    private bool _isLoading = true;
    public IEnumerable<ProductDto> _products;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _products = await ProductService.GetAll();
        _isLoading = false;
    }
}