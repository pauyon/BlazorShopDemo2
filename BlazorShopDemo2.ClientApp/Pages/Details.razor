@page "/details/{ProductId:int}"
@inject IProductService ProductService

<MudGrid>
    <MudItem xs="12" lg="12" md="12">
        <MudText Typo="Typo.h3">Product Details</MudText>
    </MudItem>
    <MudItem xs="12" lg="2" md="4">
        <MudCard Elevation="5">
            <MudCardHeader>
                <MudText Typo="Typo.h4">@_product.Name</MudText>
            </MudCardHeader>
            <MudCardMedia Image="@_product.ImageUrl" Height="250" />
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="12" xl="12">
                        <MudText Typo="Typo.body2">@_product.Description</MudText>
                    </MudItem>
                    <MudItem xs="12" md="12" xl="12">
                        <MudSelect T="decimal" Label="Size" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem T="decimal" Value="0.0m">Select Size</MudSelectItem>
                            @foreach (var productPrice in _product.ProductPrices)
                            {
                                <MudSelectItem T="decimal" Value="@productPrice.Price">@($"{productPrice.Size} - {productPrice.Price}")</MudSelectItem>   
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="12" xl="12">
                        <MudNumericField T="int" Label="Quantity" Variant="Variant.Outlined"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Dark" Href="@($"/")" FullWidth>Return to home</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth>Add to Cart</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductDto _product { get; set; } = new();
    private bool _isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _product = await ProductService.Get(ProductId);
        _isLoading = false;
    }
}
