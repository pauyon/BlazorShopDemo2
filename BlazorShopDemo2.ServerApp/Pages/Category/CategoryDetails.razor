@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3">Category Details</MudText>

<MudGrid>
    <MudItem xs="12" lg="12">
        <MudText>@_title Category</MudText>
    </MudItem>
    <MudItem xs="12" lg="12">
        @if (_isLoading)
        {
            <div class="text-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else
        {
            <EditForm Model="@_category" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <MudTextField For="@(() => _category.Name)" @bind-Value="@_category.Name" Label="@(nameof(_category.Name))" Variant="Variant.Outlined" OnlyValidateIfDirty="true" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">@_title</MudButton>
                <MudButton Href="/category" Color="Color.Secondary" Variant="Variant.Filled">Back to Categories</MudButton>
            </EditForm>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int Id { get; set; }

    private CategoryDto _category { get; set; } = new();
    private string _title { get; set; } = "Create";
    private bool _isLoading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                _isLoading = false;
            }
            else
            {
                _title = "Update";
                await LoadCategory();
            }
        }
    }

    private async Task LoadCategory()
    {
        _isLoading = true;
        StateHasChanged();
        _category = await CategoryRepository.Get(Id);
        _isLoading = false;
        StateHasChanged();
    }

    private void HandleSubmit()
    {
        if (_category.Id == 0)
        {
            CategoryRepository.Create(_category);
        }
        else
        {
            CategoryRepository.Update(_category);
        }

        NavigationManager.NavigateTo("category");
    }
}