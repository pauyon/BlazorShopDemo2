@page "/product"

@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IFileUploadService FileUploadService
@inject ISnackbar SnackbarService

<MudGrid>
    <MudItem xs="12" lg="12" md="12">
        <MudText Typo="Typo.h3">Products</MudText>
    </MudItem>
    <MudItem xs="12" lg="12" md="12">
        <MudCard Elevation="5">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" lg="12" md="12">
                        <MudButton Href="product/create" Variant="Variant.Filled" Color="Color.Primary">Add New product</MudButton>
                    </MudItem>
                    @if (_products.Any())
                    {
                        <MudItem xs="12" lg="12" md="12">
                            <MudDataGrid Items="@_products" Hover="true" Breakpoint="Breakpoint.Sm" Loading="_isLoading" LoadingProgressColor="Color.Info" Striped>
                                <Columns>
                                    <PropertyColumn Property="x => x.Name" Title="Name" Filterable="true" Sortable="true" />
                                    <PropertyColumn Property="x => x.ShopFavorites" Title="Shop Favorites" Filterable="true" Sortable="true" />
                                    <PropertyColumn Property="x => x.CustomerFavorites" Title="Customer Favorites" Filterable="true" Sortable="true" />
                                    <PropertyColumn Property="x => x.Category.Name" Title="Category" Filterable="true" Sortable="true" />
                                    <TemplateColumn>
                                        <CellTemplate>
                                            <MudStack Row>
                                                <MudButton OnClick="@(() => NavigateToEdit(context.Item))" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
                                                <MudButton OnClick="@(() => NavigateToPrice(context.Item))" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Secondary">Price</MudButton>
                                                <MudButton OnClick="@(() => OpenDeleteDialog(context.Item))" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                                            </MudStack>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>
                        </MudItem>
                    }
                    else
                    {
                        if (_isLoading)
                        {
                            <div class="text-center">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            </div>
                        }
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<ProductDto> _products { get; set; } = new List<ProductDto>();
    private bool _isLoading;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;

        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", true);
        }
        else
        {
            if (!authState.User.IsInRole(Common.Constants.RoleAdmin))
            {
                NavigationManager.NavigateTo("/errorpage");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        StateHasChanged();
        _products = await ProductRepository.GetAll();
        _isLoading = false;
        StateHasChanged();
    }

    private void NavigateToEdit(ProductDto product)
    {
        NavigationManager.NavigateTo($"product/edit/{product.Id}");
    }

    private void NavigateToPrice(ProductDto product)
    {
        NavigationManager.NavigateTo($"product/price/{product.Id}");
    }

    private async Task OpenDeleteDialog(ProductDto product)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Do you really want to delete {product.Name}? This process cannot be undone." },
            { "ButtonText", "Yes" },
            { "Color", Color.Error },
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = await DialogService.ShowAsync<DeleteConfirmation>("Delete", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                FileUploadService.DeleteFile(product.ImageUrl);
            }

            await ProductRepository.Delete(product.Id);
            SnackbarService.Add("Product successfully deleted", Severity.Success);

            await LoadProducts();
        }
    }
}
